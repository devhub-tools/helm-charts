apiVersion: apps/v1
kind: Deployment
metadata:
  name: devhub
  labels:
    {{- include "Devhub.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{- include "Devhub.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "Devhub.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "Devhub.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: devhub
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
            - name: postgres-proxy
              containerPort: 54320
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_health
              port: http
          readinessProbe:
            httpGet:
              path: /_health
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: APP_HOST
              value: {{ .Values.devhub.host }}
            - name: APP_VERSION
              value: {{ .Values.image.tag | default .Chart.AppVersion }}
            - name: DB_SSL
              value: {{ .Values.devhub.databaseConfig.ssl.mode | quote }}
            {{- with .Values.devhub.auth.emailHeader }}
            - name: AUTH_EMAIL_HEADER
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.devhub.proxyCommand }}
            - name: PROXY_COMMAND
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.devhub.proxyInstructions }}
            - name: PROXY_INSTRUCTIONS
              value: {{ . | quote }}
            {{- end }}
            {{- if .Values.devhub.agent }}
            - name: AGENT
              value: "true"
            - name: AGENT_CONFIG_FILE
              value: /etc/secrets/agent-config.json
            {{- end }}
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
          - name: config
            mountPath: "/etc/secrets"
            readOnly: true
      {{- if not .Values.devhub.agent }}
        - name: query-parser
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.queryParser.image.repository }}:{{ .Values.queryParser.image.tag }}"
          imagePullPolicy: {{ .Values.queryParser.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 50051
              protocol: TCP
        - name: request-tracer
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.requestTracer.image.repository }}:{{ .Values.requestTracer.image.tag }}"
          imagePullPolicy: {{ .Values.requestTracer.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 50052
              protocol: TCP
      initContainers:
        - name: devhub-migrations
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - ./bin/devhub
            - eval
            - Devhub.Release.migrate()
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: DB_SSL
              value: {{ .Values.devhub.databaseConfig.ssl.mode | quote }}
          volumeMounts:
          - name: config
            mountPath: "/etc/secrets"
            readOnly: true
      {{- end }}
      volumes:
      - name: config
        projected:
          sources:
          - secret:
              name: internal-secrets
              items:
              - path: SECRET_KEY_BASE
                key: SECRET_KEY_BASE
          - secret:
              name: internal-secrets
              items:
              - path: SIGNING_KEY
                key: SIGNING_KEY
          {{- with .Values.devhub.sharedEncryptionKey }}
          - secret:
              name: {{ .secret }}
              items:
              - path: SHARED_ENCRYPTION_KEY
                key: {{ .key }}
          {{- end }}
          {{- if .Values.devhub.agent }}
          - secret:
              name: {{ .Values.devhub.agentConfig.secret }}
              items:
              - path: agent-config.json
                key: {{ .Values.devhub.agentConfig.key }}
          {{- else }}
          - secret:
              name: {{ .Values.devhub.databaseConfig.encryptionKey.secret }}
              items:
              - path: CLOAK_KEY_V1
                key: {{ .Values.devhub.databaseConfig.encryptionKey.key }}
          - secret:
              name: {{ .Values.devhub.databaseConfig.host.secret }}
              items:
              - path: DB_HOSTNAME
                key: {{ .Values.devhub.databaseConfig.host.key }}
          - secret:
              name: {{ .Values.devhub.databaseConfig.name.secret }}
              items:
              - path: DB_NAME
                key: {{ .Values.devhub.databaseConfig.name.key }}
          - secret:
              name: {{ .Values.devhub.databaseConfig.user.secret }}
              items:
              - path: DB_USERNAME
                key: {{ .Values.devhub.databaseConfig.user.key }}
          - secret:
              name: {{ .Values.devhub.databaseConfig.password.secret }}
              items:
              - path: DB_PASSWORD
                key: {{ .Values.devhub.databaseConfig.password.key }}
          - secret:
              name: {{ .Values.devhub.databaseConfig.port.secret }}
              items:
              - path: DB_PORT
                key: {{ .Values.devhub.databaseConfig.port.key }}
          {{- with .Values.devhub.databaseConfig.caCert }}
          - secret:
              name: {{ .secret }}
              items:
              - path: ca.cert
                key: {{ .key }}
          {{- end }}
          {{- with .Values.devhub.databaseConfig.clientKey }}
          - secret:
              name: {{ .secret }}
              items:
              - path: client.key
                key: {{ .key }}
          {{- end }}
          {{- with .Values.devhub.databaseConfig.clientCert }}
          - secret:
              name: {{ .secret }}
              items:
              - path: client.cert
                key: {{ .key }}
          {{- end }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
