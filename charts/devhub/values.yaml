# Default values for Devhub.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

devhub:
  # -- Set to true if setting up an agent.
  agent: false

  # -- Secret name that contains the application config. See full docs for required keys.
  secret: config

  # -- The hostname of your devhub instance.
  host: devhub.example.com

  auth:
    # -- Allows authenticating users with an auth proxy that forwards a header with the users email, for example X-Forwarded-Email. If set this is the only way users can login.
    emailHeader: ""
    # -- If authenticating with an auth proxy you can configure a header that can be used to add roles to the user.
    groupsHeader: ""

  database:
    # -- Secret name that contains the database connection details. Must have `host`, `user`, and `password`. May contain `dbname` and `port` (defaults to 5432).
    secret: postgres-app
    ssl:
      # -- Use `require` or `verify` to enable SSL. Disabled by default.
      mode: disabled
      # -- Secret name that contains the database CA cert. Must have `ca.crt`.
      caSecret: postgres-ca
      # -- Secret name that contains the database client cert. Must have both `tls.crt` and `tls.key`.
      clientCertSecret: ""

  proxy:
    # command: ""
    # instructions: ""
    tls:
      # -- Secret name that contains the TLS certs to be served by the proxy. Must have both `tls.crt` and `tls.key`.
      secret: ""

image:
  repository: ghcr.io/devhub-tools/devhub
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

queryParser:
  image:
    repository: ghcr.io/devhub-tools/query-parser
    tag: v1.0.0
    pullPolicy: IfNotPresent

requestTracer:
  image:
    repository: ghcr.io/devhub-tools/request-tracer
    tag: v1.0.0
    pullPolicy: IfNotPresent

service:
  type: ClusterIP

ingressRoute:
  # -- If you have Traefik installed in your cluster you can configure an IngressRoute: https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-ingressroute
  enabled: false
  tls: {}

networkPolicy:
  # -- Set to true to create a network policy (disabled by default). An example network policy is provided in the values.yaml file.
  create: false
  # @ignored
  ingress:
    # allow web traffic
    - ports:
      - port: 4000
        protocol: TCP

    # allow database access inside the namespace
    - ports:
        - port: 5432
          protocol: TCP
      from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: devhub

    # allow cloudnative-pg to manage the database
    - from:
      - namespaceSelector:
          matchLabels:
            kubernetes.io/metadata.name: cnpg-system
        podSelector:
          matchLabels:
            app.kubernetes.io/name: cloudnative-pg
      ports:
        - port: 8000
        - port: 5432
  # @ignored
  egress:
    # allow dns access
    - ports:
      - port: 53
        protocol: TCP
      - port: 53
        protocol: UDP
      to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system

    # allow database access inside the namespace
    - ports:
        - port: 5432
          protocol: TCP
      to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: devhub

    # allow internet egress (depending on your k8s setup you may need to exclude internal IPs)
    - ports:
      - protocol: TCP
      to:
        - ipBlock:
            cidr: 0.0.0.0/0

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  # -- Set to true to use a pre-configured database. The CloudNativePG operator is required. Please see the docs for configuration options: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-Cluster.
  enabled: false
  cluster:
    name: postgres
    instances: 2
    storage:
      size: 10Gi
      storageClass: ""
    sharedBuffers: "256MB"
    resources:
      requests:
        cpu: "20m"
      limits:
        memory: "1Gi"
    primaryUpdateStrategy: unsupervised
    primaryUpdateMethod: switchover
    affinity: {}
    backup: {}
  scheduledBackup:
    # -- Set to true to enable scheduled backups. You must also provide the required configuration in `postgresql.cluster.backup`.
    enabled: false
    # -- The cron schedule for the backup. Defaults to daily. See docs for more information: https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format
    schedule: "0 0 0 * * *"

extraEnvVars: []